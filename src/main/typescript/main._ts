// NSS : Not So Simple Chords
export namespace ITQuasar.Multiverse.NSSChorsJS {

    class RefsConfiguration {
        chords: string = '.chords'
        strumming: string = '.strumming'
        bpm: string = '.bpm'
    }

    class Configuration {
        refs: RefsConfiguration = new RefsConfiguration();
    }

    export const defaultConfiguration : Configuration = Object.freeze(new Configuration());
    export function configuration(values: Configuration | object): Configuration {
        return Object.assign(new Configuration(), values);
    }

    abstract class ElementsReferenced {

        protected elRef: string;
        protected configuration: Configuration;
        protected refs: NodeListOf<HTMLElement>;

        constructor(elRef: string, configuration: Configuration) {
            this.elRef = elRef;
            this.configuration = configuration;
            this.refs = document.querySelectorAll(this.elRef);
            if (this.refs === null) {
                throw 'Refs not found!';
            }
        }

        protected abstract process(element: HTMLElement): void;

        public play(): void {
            this.refs.forEach((el) => {
                this.process(el);
                el.classList.remove('cloak')
            })
        }

    }

    class Chords extends ElementsReferenced {

        constructor(configuration: Configuration) {
            super(configuration.refs.chords ?? defaultConfiguration.refs.chords, configuration);
        }

        process(element: HTMLElement): void {
                const content = element.textContent;
                if (content === null) {
                    throw `Content was null on element (using ${this.elRef})`;
                }
                const lines = content.split('\n')
                let section = document.createElement('div')
                let sections = 0;
                let blanks = 0;
                let lastWasSession = false;

                for (let i = 0; i < lines.length; i++) {
                    let text = lines[i]
                    let line = document.createElement('p')
                    line.textContent = text

                    if (text.trim() === '') {
                        blanks++;
                        if (!lastWasSession && blanks == 1 && sections > 0) {
                            section.appendChild(document.createElement('br'));
                        }
                        continue;
                    }
                    blanks = 0;
                    lastWasSession = false

                    if (/^ *\[[A-Za-zÀ-ÖØ-öø-ÿ0-9? -]+\]$/.test(text)) {
                        lastWasSession = true
                        // console.log('section', text)
                        sections++;
                        if (section.children.length > 0) {
                            element.appendChild(section)
                        }

                        line.textContent = text.trim()
                        section = document.createElement('div')
                        section.dataset.name = line.textContent.substring(1, line.textContent.length - 1)
                        line.classList.add('has-text-weight-bold')
                        line.classList.add('my-5')
                    } else if (/^[A-H1-9Mm#bdisu°+\%()*~v^| ><\[\]/ mpf]+$/.test(text)) {
                        // console.log('chords', text)
                        //line.innerHTML = text.replace('v', '&#x2193;').replace('^', '&#x2191;')
                        line.classList.add('mt-2')
                        line.classList.add('has-text-primary')
                        line.classList.add('has-text-weight-bold')
                    }
                    section.appendChild(line)
                }

                if (sections == 0) {
                    while (section.childNodes.length > 0) {
                        element.appendChild(section.childNodes[0])
                    }
                } else {
                    element.appendChild(section)
                }

        }
    }

    class Strumming extends ElementsReferenced {

        constructor(configuration: Configuration) {
            super(configuration.refs.strumming ?? defaultConfiguration.refs.strumming, configuration);
        }

        init(): void {

            let strummings = document.querySelectorAll('.batida .content pre')
            strummings = strummings.length > 0 ? strummings : document.querySelectorAll('.batida')
            console.log('strummings', strummings)
            strummings.forEach(strumming => {
                const text = strumming?.textContent?.trim()
                if (text === null || text === 'N/I') {
                    return;
                }
                const signs = text?.split('').map(sign => {
                    switch (sign) {
                        case 'V':
                            return '&#x2193;'
                        // '&#x21a1;'
                        case 'v':
                            return '&#x21e3;'
                        case 'A':
                            return '&#x2191;'
                        // '&#x219f;'
                        case '^':
                            return '&#x21e1';
                        case 'x':
                            return '&#x2093;'
                        case '.':
                            return '&#x2e;'
                        default:
                            return '?'
                    }
                }).join('')
                strumming.style.fontFamily = "'MesloLGSDZ Nerd Font Mono', monospace"
                strumming.style.fontSize = '2em'
                strumming.style.letterSpacing = '-.25em'
                strumming.style.lineHeight = '0.4em'
                strumming.style.verticalAlign = 'text-top'
                strumming.innerHTML = signs
            })
        }
    }

    class BPM extends ElementsReferenced {

        constructor(configuration: Configuration) {
            super(configuration.refs.bpm ?? defaultConfiguration.refs.bpm, configuration);
        }

        init(): void {

            const bpmNote = document.querySelectorAll('.bpm')
            bpmNote.forEach(node => {
                const text = node.textContent
                const parts = text.split(' ')
                if (/[0-9\/ \.]+/.test(text) && parts.length == 2) {
                    note = parts[0]
                    bpm = parts[1]
                    switch (note) {
                        case '1':
                            note = "&#x1d15d;"
                            break
                        case '1/2':
                            note = "&#x1d15e;"
                            break
                        case '1/4':
                            note = "&#x1d15f;"
                            break
                        case '1/8':
                            note = "&#x1d160;"
                            break
                        case '1/16':
                            note = "&#x1d161;"
                            break
                    }
                    node.innerHTML = `<span style="letter-spacing: .5em">${note}</span> ${bpm}`
                }
            })
        }
    }

    class PrintMode {
        init(): void {
            // print preview
            if (location.search.includes("print=true")) {
                console.log("PRINT MODE")
                document.querySelectorAll('head>link[rel=stylesheet]').forEach(css => {
        /*if ("screen" == css.media) {
            console.log("PRINT MODE :: Removing", css)
            css.remove()
        } else*/ if ("print" == css.media) {
                        let link = document.createElement('link')
                        link.media = 'screen'
                        link.href = css.href
                        link.rel = css.rel
                        document.querySelector('head').appendChild(link)
                        console.log("PRINT MODE :: adding print link to screen", css)
                    } else {
                        console.log("PRINT MODE :: skipping", css)
                    }
                });
            } else {
                console.log("SCREEN MODE")
            }
        }
    }
    


    /**
     * Initializes afetr document ready
     */
    export function lazy(options: Configuration) {
        document.addEventListener("DOMContentLoaded", () => {
            new Chords(options).play();
        });
    }
}

export default ITQuasar.Multiverse.NSSChorsJS;









