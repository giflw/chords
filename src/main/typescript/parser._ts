
/*export class EmptyNode extends Node {

    public static readonly REGEX: RegExp = /^(?<value>\s*)$/m;
    public static readonly INSTANCE: EmptyNode = new EmptyNode("");

    // TODO on renderer: if config is set to clean space chars, use only INSTANCE.
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    static parse(value: string, index: number, array: string[]): EmptyNode {
        return value.length === 0 ? EmptyNode.INSTANCE : new EmptyNode(value);
    }

    private constructor(value: string) {
        super(value);
    }
}*/



export class MetaNode extends Node { }

export class AdocVerbatimBlockSeparatorNode extends Node { }

export class AnnotationNode extends Node { }

export class BlockNode extends Node {

    public static readonly REGEX: RegExp = /^\[(?<value>[\p{L}\p{M}\p{Zs}0-9: -]+)\]$/um;
    readonly blocks: Node[];

    constructor(name: string) {
        super(name);
        this.blocks = [];
    }

    public isBlock(): boolean {
        return true;
    }
}
